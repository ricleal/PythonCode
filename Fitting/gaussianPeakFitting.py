'''

Created on Feb 22, 2013

@author: leal
'''
import numpy as np
import matplotlib.pyplot as plt

def mygaussfit(x,y,h=0.2) :
    """
    function [sigma,mu,A]=mygaussfit(x,y,h)
    
    %
    % [sigma,mu,A]=mygaussfit(x,y)
    % [sigma,mu,A]=mygaussfit(x,y,h)
    %
    % this function is doing fit to the function
    % y=A * exp( -(x-mu)^2 / (2*sigma^2) )
    %
    % the fitting is been done by a polyfit
    % the lan of the data.
    %
    % h is the threshold which is the fraction
    % from the maximum y height that the data
    % is been taken from.
    % h should be a number between 0-1.
    % if h have not been taken it is set to be 0.2
    % as default.
    %
    """
    
    # cutting
    ymax=np.max(y);
    xnew=[];
    ynew=[];
    for i in range(len(x)) : #=1:length(x)
        if y[i] > ymax * h:
            xnew.append(x[i])
            ynew.append(y[i])
    # fitting
    ylog=np.log(ynew);
    xlog=xnew;
    p=np.polyfit(xlog,ylog,2);
    A2=p[0];
    A1=p[1];
    A0=p[2];    
    sigma=np.sqrt(-1/(2*A2));
    mu=A1*sigma**2;
    A=np.exp(A0+mu**2/(2*sigma**2));
    return sigma,mu,A




if __name__ == "__main__":
    #
    x = np.linspace(0,511,512)
    sigma=10
    mu=290
    A=200 #H
    #y = A * np.exp(-(x-mu)**2/(2*sigma**2))+np.random.rand(len(x))*0.3
    #y = [2383,379,359,386,376,385,408,399,380,384,381,391,395,424,434,436,443,481,545,549,564,571,570,531,547,619,536,558,563,602,595,615,576,629,628,587,622,662,692,699,761,800,833,882,898,940,918,859,879,851,810,766,701,636,679,624,575,515,496,518,432,461,462,428,458,419,368,400,371,415,414,381,357,372,363,425,377,329,366,347,350,316,345,363,373,373,354,365,350,335,327,337,327,307,322,294,317,339,294,258,270,295,299,274,270,253,244,228,286,246,246,245,243,251,211,268,226,245,239,248,211,244,227,220,221,211,224,226,212,198,224,222,207,187,212,223,202,224,196,190,197,184,203,189,210,204,196,177,190,183,198,171,207,185,177,169,195,187,157,175,203,185,186,190,187,171,179,187,172,182,202,178,167,181,194,178,167,186,182,170,182,168,183,196,182,146,158,160,175,148,172,163,185,152,175,156,172,186,169,151,185,142,146,145,158,164,170,158,161,134,142,168,171,154,143,153,138,172,153,164,149,167,162,133,154,166,171,136,166,160,152,176,138,140,120,174,141,152,156,160,143,181,207,198,254,284,290,375,450,509,801,3187,17245,71206,198205,402241,634402,810335,871807,819446,709139,601219,523270,468628,428849,398420,371919,351755,334851,318433,304715,293669,281271,271666,263951,253200,239614,219699,186808,145437,98333,57785,29552,14322,8058,6193,5624,5340,5185,4995,4574,4508,4350,4173,4045,3962,3772,3757,3804,3901,3945,4028,4160,4314,4172,4235,4282,4309,4279,4208,4089,4052,4096,3952,4048,4107,4005,3971,3903,3823,3885,3842,3603,3647,3676,3552,3581,3486,3360,3308,3285,3159,3176,3034,3080,2964,2958,2937,2983,2842,2823,2834,2853,2835,2731,2640,2737,2633,2770,2657,2585,2591,2622,2583,2609,2510,2484,2520,2536,2632,2467,2284,2444,2456,2483,2431,2471,2435,2409,2337,2373,2427,2435,2379,2383,2413,2312,2481,2333,2273,2338,2347,2288,2339,2353,2312,2262,2287,2356,2361,2239,2258,2211,2265,2227,2252,2228,2212,2285,2257,2259,2217,2200,2203,2299,2272,2203,2206,2251,2188,2204,2279,2076,2198,2029,2018,2044,2028,2000,1944,1963,1951,1865,1782,1802,1801,1724,1761,1654,1645,1596,1482,1549,1406,1420,1368,1385,1278,1336,1267,1314,1173,1171,1147,1136,1125,1090,1068,1008,982,966,990,959,862,859,878,814,824,787,790,835,768,730,720,716,703,718,634,716,633,631,617,611,598,549,618,579,544,513,528,524,533,549,515,501,471,443,397,472,421,423,458,432,432,407,420,413,417,409,396,380,377,389,414,373,364,329,362,363,324,354,331]
    y = [760,126,105,125,140,137,114,147,131,138,155,133,149,170,170,174,210,214,202,214,238,261,265,269,314,336,339,323,434,484,543,619,621,694,775,849,923,929,982,1048,1111,1037,1171,1193,1385,1493,1693,1762,2032,2241,2498,2537,2690,2869,3196,3518,3980,4731,5779,6516,7301,7812,8291,8256,8311,8133,7775,7454,7497,7297,7313,7477,7480,7495,7710,8076,8405,8907,9434,9679,9740,9690,9715,9136,8619,8145,7816,7220,6881,6322,5958,5484,5304,4862,4543,4214,4177,3814,3672,3493,3370,3193,3094,2945,2902,2835,2860,2735,2646,2654,2488,2439,2431,2401,2321,2326,2242,2184,2151,2151,2134,2021,2043,2027,1965,1939,1842,1854,1813,1742,1878,1682,1704,1597,1623,1558,1515,1530,1454,1386,1399,1422,1393,1288,1238,1198,1205,1214,1192,1135,1129,1087,1032,1045,1037,1000,951,1007,936,906,949,929,855,834,775,752,810,839,724,722,770,739,684,688,629,662,640,628,644,648,589,566,594,575,558,565,551,539,512,537,519,506,526,509,483,453,477,476,469,402,437,468,415,417,399,444,455,375,356,432,373,400,382,404,408,359,361,386,345,356,328,349,335,352,377,355,319,337,319,285,337,327,329,334,300,306,290,312,300,333,312,328,305,301,298,276,277,314,279,280,270,272,300,270,289,270,294,274,309,281,298,284,261,279,312,280,294,284,251,276,284,287,266,277,296,257,274,260,268,299,281,293,311,302,334,323,321,329,351,297,341,680,5462,31036,105386,238693,410345,561647,634486,619880,552571,474298,414082,373510,341387,317991,297895,279239,265134,251580,240335,230557,220453,213596,205147,197285,187094,172250,149280,116935,80913,48104,23235,9140,2906,890,521,474,392,390,338,363,349,312,349,291,284,271,282,266,247,223,267,235,251,216,261,232,210,234,206,195,196,209,183,188,185,180,193,167,213,190,160,186,146,157,170,161,188,163,174,178,166,159,138,145,167,164,165,156,153,159,152,146,146,152,147,151,162,176,185,181,180,209,179,175,172,166,163,170,150,172,158,144,170,131,160,127,120,126,162,110,153,153,132,127,179,159,155,141,108,136,144,119,149,114,123,113,144,136,114,133,134,118,122,120,118,127,95,132,126,116,134,110,136,118,105,105,105,127,123,112,121,107,103,124,132,144,125,83,142,120,140,140,202,177,139,114,111,112,113,102,115,125,133,135,116,109,131,109,103,125,101,119,131,131,113,141,112,129,89,122,113,108,105,106,109,114,107,129,132,126,121,121,94,103,91,98,120,116,102,128]
    plt.plot(x,y,'.');
    # fitting
    [sigmaNew,muNew,Anew]=mygaussfit(x,y,h=0.5)
    y=Anew*np.exp(-(x-muNew)**2/(2*sigmaNew**2))
    #
    plt.xlim([250,350])
    plt.plot(x,y,'-')
    plt.show()
